import streamlit as st
import pandas as pd
import datetime
from PIL import Image
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter

# Read data from csv file
df = pd.read_csv("danhsach_due.csv")

st.set_page_config(layout="wide")
st.markdown('<style>div.block-container{padding-top:1rem;}</style>', unsafe_allow_html=True)
image = Image.open('due.jpg')

col1, col2 = st.columns([0.2, 0.8])
with col1:
    st.markdown("<br><br>")  # Th√™m 2 d√≤ng tr·∫Øng ph√≠a tr√™n logo
    st.image(image, width=180)  # ƒêi·ªÅu ch·ªânh width ·ªü ƒë√¢y ƒë·ªÉ logo l·ªõn h∆°n, ch·∫≥ng h·∫°n width=200

html_title = """
    <style>
    .title-test {
    font-weight:bold;
    padding: 20px 5px;
    border-radius:6px;
    }
    </style>
    <center><h1 class="title-test">Courses Evaluation Dashboard</h1></center>"""
with col2:
    st.markdown(html_title, unsafe_allow_html=True)


# Th√™m c·ªôt cho th√¥ng tin Last updated
# col3, col4, col5, col6 = st.columns([0.2, 0.45, 0.45, 0.45])

# Hi·ªÉn th·ªã ng√†y c·∫≠p nh·∫≠t
col3, filter_col1, filter_col2, filter_col3, filter_col4 = st.columns([0.2, 0.3, 0.3, 0.3, 0.3])
with col3:
    box_date = str(datetime.datetime.now().strftime("%d %B %Y"))
    st.write(f"Last updated by:  \n {box_date}")

# ---------- B·ªô l·ªçc ƒê∆°n v·ªã (Khoa) ----------
with filter_col1:
    all_khoa = sorted(df['ƒê∆°n v·ªã'].dropna().unique())
    selected_khoa = st.multiselect('Ch·ªçn Khoa (ƒê∆°n v·ªã)', ['T·∫•t c·∫£'] + all_khoa)

    # N·∫øu ch·ªçn "T·∫•t c·∫£", l·∫•y to√†n b·ªô
    if 'T·∫•t c·∫£' in selected_khoa or not selected_khoa:
        filtered_df_khoa = df.copy()
    else:
        filtered_df_khoa = df[df['ƒê∆°n v·ªã'].isin(selected_khoa)]

# ---------- B·ªô l·ªçc Gi·∫£ng vi√™n ----------
with filter_col2:
    all_teachers = sorted(filtered_df_khoa['Teacher_name'].dropna().unique())
    selected_teachers = st.multiselect('Ch·ªçn Gi·∫£ng vi√™n', ['T·∫•t c·∫£'] + all_teachers)

    if 'T·∫•t c·∫£' in selected_teachers or not selected_teachers:
        filtered_df_teacher = filtered_df_khoa
    else:
        filtered_df_teacher = filtered_df_khoa[filtered_df_khoa['Teacher_name'].isin(selected_teachers)]

# ---------- B·ªô l·ªçc M√¥n h·ªçc ----------
with filter_col3:
    all_subjects = sorted(filtered_df_teacher['Subject_name'].dropna().unique())
    selected_subjects = st.multiselect('Ch·ªçn M√¥n h·ªçc', ['T·∫•t c·∫£'] + all_subjects)

    if 'T·∫•t c·∫£' in selected_subjects or not selected_subjects:
        filtered_df_subject = filtered_df_teacher
    else:
        filtered_df_subject = filtered_df_teacher[filtered_df_teacher['Subject_name'].isin(selected_subjects)]

# ---------- B·ªô l·ªçc M√£ l·ªõp ----------
with filter_col4:
    all_classes = sorted(filtered_df_subject['Class_code'].dropna().unique())
    selected_classes = st.multiselect('Ch·ªçn M√£ l·ªõp h·ªçc', ['T·∫•t c·∫£'] + all_classes)

    if 'T·∫•t c·∫£' in selected_classes or not selected_classes:
        final_filtered_df = filtered_df_subject
    else:
        final_filtered_df = filtered_df_subject[filtered_df_subject['Class_code'].isin(selected_classes)]

# ---------- Hi·ªÉn th·ªã k·∫øt qu·∫£ ----------
# st.write("üîç **D·ªØ li·ªáu ƒë√£ l·ªçc:**")
# st.dataframe(final_filtered_df)


# # (Tu·ª≥ ch·ªçn) Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
# st.write("üîç **D·ªØ li·ªáu ƒë√£ l·ªçc:**")
# st.dataframe(final_filtered_df[final_filtered_df['Class_code'] == selected_class])

# L·ªçc d·ªØ li·ªáu theo gi·∫£ng vi√™n v√† m√¥n h·ªçc ƒë√£ ch·ªçn
filtered_data = final_filtered_df.copy()

# st.dataframe(final_filtered_df)
col4, col5, col6 = st.columns([0.45, 0.45, 0.45])

total_students = df['Stu_id'].nunique()
total_teachers = df['Teacher_name'].nunique()
total_subjects = df['Subject_name'].nunique()

# Th√™m c√°c box th√¥ng tin t·ªïng qu√°t
with col4:
    st.markdown(f"""
        <div style='text-align: center; font-size: 32px;'>
            üë®‚Äçüéì<br><strong>{total_students}</strong><br><span style='font-size:24px'>S·ªë sinh vi√™n</span>
        </div>
    """, unsafe_allow_html=True)

with col5:
    st.markdown(f"""
        <div style='text-align: center; font-size: 32px;'>
            üë©‚Äçüè´<br><strong>{total_teachers}</strong><br><span style='font-size:24px'>S·ªë gi·∫£ng vi√™n</span>
        </div>
    """, unsafe_allow_html=True)

with col6:
    st.markdown(f"""
        <div style='text-align: center; font-size: 32px;'>
            üìö<br><strong>{total_subjects}</strong><br><span style='font-size:24px'>S·ªë m√¥n h·ªçc</span>
        </div>
    """, unsafe_allow_html=True)

####################
# filtered_data = df[(df['Teacher_name'] == selected_teacher) & 
#                    (df['Subject_name'] == selected_subject)]

# T·∫°o danh s√°ch c√°c c√¢u h·ªèi (Q1 ƒë·∫øn Q12)

q_cols = [f'Q{i}' for i in range(1, 13)]
result_list = []

if not filtered_data.empty:
    for q in q_cols:
        avg_score = filtered_data[q].mean()
        std_score = filtered_data[q].std()
        count_level = [(filtered_data[q] == i).sum() for i in range(1, 6)]

        # Trung b√¨nh c√°c l·ªõp c√πng h·ªçc ph·∫ßn
        if selected_subjects and 'T·∫•t c·∫£' not in selected_subjects:
            subject_data = df[df['Subject_name'].isin(selected_subjects)]
        else:
            subject_data = df.copy()
        avg_class_hp = subject_data[q].mean()

        # Trung b√¨nh to√†n tr∆∞·ªùng
        avg_score_all = df[q].mean()

        result_list.append([
            q, round(avg_score, 2), round(std_score, 2), *count_level,
            round(avg_class_hp, 2), round(avg_score_all, 2)
        ])

    # T·∫°o DataFrame k·∫øt qu·∫£
    result_df = pd.DataFrame(result_list, columns=[
        'C√¢u h·ªèi', 'ƒê√°nh gi√° trung b√¨nh', 'ƒê·ªô l·ªách chu·∫©n',
        'S·ªë c√¢u ·ªü m·ª©c 1', 'S·ªë c√¢u ·ªü m·ª©c 2', 'S·ªë c√¢u ·ªü m·ª©c 3',
        'S·ªë c√¢u ·ªü m·ª©c 4', 'S·ªë c√¢u ·ªü m·ª©c 5',
        'TB c√°c l·ªõp c·ªßa c√πng HP', 'TB to√†n tr∆∞·ªùng'
    ])

    # √Ånh x·∫° n·ªôi dung c√¢u h·ªèi
    question_labels = {
        'Q1': 'ƒë·∫ßy ƒë·ªß v·ªÅ ƒë·ªÅ c∆∞∆°ng chi ti·∫øt h·ªçc ph·∫ßn, g·ªìm: chu·∫©n ƒë·∫ßu ra, n·ªôi dung, ph∆∞∆°ng ph√°p d·∫°y - h·ªçc, ph∆∞∆°ng ph√°p ki·ªÉm tra - ƒë√°nh gi√°, t√†i li·ªáu h·ªçc t·∫≠p c·ªßa h·ªçc ph·∫ßn',
        'Q2': '2. N·ªôi dung c·ªßa h·ªçc ph·∫ßn ph√π h·ª£p v·ªõi nƒÉng l·ª±c c·ªßa ng∆∞·ªùi h·ªçc',
        'Q3': '3. Ph∆∞∆°ng ph√°p d·∫°y - h·ªçc ph√π h·ª£p v·ªõi chu·∫©n ƒë·∫ßu ra v√† n·ªôi dung c·ªßa h·ªçc ph·∫ßn',
        'Q4': '4. Gi·∫£ng vi√™n th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß k·∫ø ho·∫°ch d·∫°y - h·ªçc ƒë√£ c√¥ng b·ªë v√† tu√¢n th·ªß c√°c quy ƒë·ªãnh trong gi·∫£ng d·∫°y',
        'Q5': '5. Gi·∫£ng vi√™n c√≥ c·∫≠p nh·∫≠t ki·∫øn th·ª©c m·ªõi v√† th·ª±c t·∫ø trong b√†i gi·∫£ng',
        'Q6': '6. Ho·∫°t ƒë·ªông d·∫°y - h·ªçc kh∆°i g·ª£i ƒëam m√™ kh√°m ph√° v√† gi√∫p ph√°t tri·ªÉn kh·∫£ nƒÉng t·ª± h·ªçc',
        'Q7': '7. Gi·∫£ng vi√™n khuy·∫øn kh√≠ch ng∆∞·ªùi h·ªçc ch·ªß ƒë·ªông tham gia th·∫£o lu·∫≠n, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ trong gi·ªù h·ªçc',
        'Q8': '8. Gi·∫£ng vi√™n t·∫≠n t·ª•y, s·∫µn s√†ng gi√∫p ƒë·ª°, gi·∫£i ƒë√°p th·ªèa ƒë√°ng c√°c th·∫Øc m·∫Øc c·ªßa ng∆∞·ªùi h·ªçc',
        'Q9': '9. Gi·∫£ng vi√™n s·ª≠ d·ª•ng hi·ªáu qu·∫£ Elearning v√† c√°c ph∆∞∆°ng ti·ªán c√¥ng ngh·ªá trong t·ªï ch·ª©c d·∫°y h·ªçc',
        'Q10':'10. Ph∆∞∆°ng ph√°p ki·ªÉm tra, ƒë√°nh gi√° ph√π h·ª£p v·ªõi chu·∫©n ƒë·∫ßu ra v√† n·ªôi dung c·ªßa h·ªçc ph·∫ßn',
        'Q11': '11. Vi·ªác ƒë√°nh gi√° ƒë∆∞·ª£c th·ª±c hi·ªán c√¥ng b·∫±ng, kh√°ch quan v√† ƒë·∫£m b·∫£o ƒë·ªô tin c·∫≠y',
        'Q12': '12. Anh/Ch·ªã h√†i l√≤ng v·ªÅ ch·∫•t l∆∞·ª£ng v√† hi·ªáu qu·∫£ gi·∫£ng d·∫°y c·ªßa gi·∫£ng vi√™n ƒë·ªëi v·ªõi s·ª± ti·∫øn b·ªô trong h·ªçc t·∫≠p c·ªßa b·∫£n th√¢n'
    }
    result_df['C√¢u h·ªèi'] = result_df['C√¢u h·ªèi'].map(question_labels)

    # T√≠nh trung b√¨nh to√†n b·∫£ng cho c√°c c·ªôt s·ªë
    avg_overall = {
        'C√¢u h·ªèi': 'Trung b√¨nh chung',
        'ƒê√°nh gi√° trung b√¨nh': round(result_df['ƒê√°nh gi√° trung b√¨nh'].mean(), 2),
        'ƒê·ªô l·ªách chu·∫©n': '',
        'S·ªë c√¢u ·ªü m·ª©c 1': '',
        'S·ªë c√¢u ·ªü m·ª©c 2': '',
        'S·ªë c√¢u ·ªü m·ª©c 3': '',
        'S·ªë c√¢u ·ªü m·ª©c 4': '',
        'S·ªë c√¢u ·ªü m·ª©c 5': '',
        'TB c√°c l·ªõp c·ªßa c√πng HP': round(result_df['TB c√°c l·ªõp c·ªßa c√πng HP'].mean(), 2),
        'TB to√†n tr∆∞·ªùng': round(result_df['TB to√†n tr∆∞·ªùng'].mean(), 2)
    }

    result_df = pd.concat([result_df, pd.DataFrame([avg_overall])], ignore_index=True)

    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    st.write(f"üìä **K·∫øt qu·∫£ ƒë√°nh gi√°**")
    if selected_teachers and 'T·∫•t c·∫£' not in selected_teachers:
        st.markdown(f"Gi·∫£ng vi√™n: **{', '.join(selected_teachers)}**")
    if selected_subjects and 'T·∫•t c·∫£' not in selected_subjects:
        st.markdown(f"M√¥n h·ªçc: **{', '.join(selected_subjects)}**")

    # H√†m hi·ªÉn th·ªã HTML b·∫£ng
    def render_html_table(df):
        html = """
        <style>
            table {width: 100%; table-layout: fixed;}
            th, td {
                word-wrap: break-word;
                padding: 8px;
                text-align: center;
                vertical-align: top;
            }
            th:nth-child(1), td:nth-child(1) {
                text-align: left;
                width: 40%;
            }
        </style>
        """
        html += "<table border='1' style='border-collapse: collapse;'>"
        html += "<thead><tr>"
        for col in df.columns:
            html += f"<th>{col}</th>"
        html += "</tr></thead><tbody>"
        for _, row in df.iterrows():
            html += "<tr>"
            for col in df.columns:
                html += f"<td>{row[col]}</td>"
            html += "</tr>"
        html += "</tbody></table>"
        return html

    st.markdown(render_html_table(result_df), unsafe_allow_html=True)

else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")

# T·∫°o 2 c·ªôt c·∫°nh nhau
chart_col, comment_col = st.columns(2)

# ==== C·ªòT BI·ªÇU ƒê·ªí C·∫¢M X√öC ====
with chart_col:
    st.markdown("### üòä Nh·∫≠n x√©t ƒë√°nh gi√° ")

    if 'sentiment' in filtered_data.columns:
        sentiment_counts = Counter({'Positive': 0, 'Neutral': 0, 'Negative': 0})
        sentiment_counts.update(filtered_data['sentiment'].dropna())

        labels = ['Positive', 'Neutral', 'Negative']
        values = [sentiment_counts[label] for label in labels]
        colors = ['green', 'gray', 'red']

        fig = go.Figure(data=[go.Bar(
            x=labels,
            y=values,
            marker_color=colors,
            text=values,
            textposition='outside'
        )])

        fig.update_layout(
            title=f'Ph√¢n b·ªë c·∫£m x√∫c - {selected_teachers} - {selected_subjects}',
            xaxis_title='C·∫£m x√∫c',
            yaxis_title='S·ªë l∆∞·ª£ng',
            yaxis=dict(range=[0, max(values)+10000]),
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Kh√¥ng t√¨m th·∫•y c·ªôt `sentiment` trong d·ªØ li·ªáu.")

# ==== C·ªòT TOP 10 B√åNH LU·∫¨N ====
with comment_col:
    st.markdown("### üìù Nh·ªØng b√¨nh lu·∫≠n n·ªïi b·∫≠t")

    if 'comment_processed' in filtered_data.columns:
        sorted_comments = sorted(
            filtered_data['comment_processed'].dropna().unique(), 
            key=len, reverse=True
        )[:10]

        comments_df = pd.DataFrame({
            "STT": list(range(1, len(sorted_comments) + 1)),
            "B√¨nh lu·∫≠n": sorted_comments
        })


        # Hi·ªÉn th·ªã b·∫£ng m√† kh√¥ng c√≥ c·ªôt index th·ª´a
        st.dataframe(comments_df, use_container_width=True, hide_index=True)
    else:
        st.info("Kh√¥ng t√¨m th·∫•y c·ªôt `comment_processed` trong d·ªØ li·ªáu.")

